openapi: 3.0.0
info:
  title: Bookstore API
  version: 1.0.0
  description: |-
    This is a sample Bookstore Server based on the OpenAPI 3.0 specification.  
    Created by **[Gabriel Aichinger](https://github.com/mindthegabs)** and **[Daniel Harka](https://github.com/MrDanielHarka)**.
servers:
  - url: http://api.example.com/v1
paths:
  /books:
    get:
      summary: Retrieve all books
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  '/books/{bookId}':
    get:
      summary: Retrieve a specific book
      parameters:
        - name: bookId
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update a specific book
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete a specific book
      parameters:
        - name: bookId
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully
  '/authors':
    get:
      summary: Retrieve all authors
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  '/authors/{authorId}':
    get:
      summary: Retrieve a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      summary: Update a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json: schema
          $ref: '#/components/schemas/AuthorInput'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted successfully
  '/authors/{authorId}/books':
    get:
      summary: Retrieve all books by a specific author
      parameters:
        - name: authorId
          in: path
          description: ID of the author
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author_id:
          type: integer
        published_year:
          type: integer
    BookInput:
      type: object
      properties:
        title:
          type: string
        author_id:
          type: integer
        published_year:
          type: integer
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    AuthorInput:
      type: object
      properties:
        name:
          type: string
