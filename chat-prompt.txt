app.js:

import {server} from './server.js';

server.listen(3000, error => {
  if (error) return logEventToLogFile(error, error.message);
});

server.js

import {createRequire} from 'module';
import BookController from './controllers/BookController.js';
import AuthorController from './controllers/AuthorController.js';
import {
  setServerConfiguration,
  checkDatabaseHealth,
  parseRequestData, logEventToLogFile,
} from './utilities.js';
import login from './loginService.js';

const require = createRequire(import.meta.url);
const http = require('http');

const server = http.createServer(async (request, response) => {
  setServerConfiguration(response);
  try {
    const isServerOnline = await checkDatabaseHealth();

    if (isServerOnline) {
      const requestData = await parseRequestData(request);
      const isAuthorized = await login(requestData);

      if (
        request.url.startsWith('/books') &&
        (request.method === 'GET' || isAuthorized)
      ) {
        await BookController.routeRequest(request, response, requestData);
      } else if (request.url.startsWith('/authors') &&
        (request.method === 'GET' || isAuthorized)) {
        await AuthorController.routeRequest(request, response, requestData);
      } else {
        response.writeHead(401);
        response.end('You are not authorized to perform this action.');
      }
    }
  } catch (error) {
    logEventToLogFile(error, error.message);
    response.writeHead(404);
    response.end(error.message);
  }
});

export {server};

AuthorController.js:

import AuthorModel from '../models/AuthorModel.js';
import authorView from "../views/AuthorView.js";
import AuthorView from "../views/AuthorView.js";
import DatabaseException from "../exceptions/DatabaseException.js";
import {logEventToLogFile} from "../utilities.js";

class AuthorController {
  static async routeRequest(request, response, requestData) {
    try {
      if (
        request.method === 'GET' &&
        request.url.startsWith('/authors/') &&
        request.url.endsWith('/books')
      ) {
        const allBooksFromOneAuthor = await AuthorModel.getAllBooksFromOneAuthor(request);
        authorView.sendAllBooksFromOneAuthor(allBooksFromOneAuthor, response)
      } else if (request.method === 'GET' && request.url === '/authors') {
        const allAuthors = await AuthorModel.getAllAuthors(response);
        AuthorView.sendAllAuthors(allAuthors, response);
      } else if (
        request.method === 'GET' &&
        request.url.startsWith('/authors/')
      ) {
        const oneAuthor = await AuthorModel.getOneAuthor(request, response);
        AuthorView.sendOneAuthor(oneAuthor, response);
      } else if (request.method === 'POST' && request.url === '/authors') {
        const createdAuthorId = await AuthorModel.addOneAuthor(requestData);
        AuthorView.sendCreatedAuthorId(createdAuthorId, response);
      } else if (
        request.method === 'PUT' &&
        request.url.startsWith('/authors/')
      ) {
        const editedAuthorId = await AuthorModel.updateOneAuthor(request, requestData);
        AuthorView.sendEditedAuthorId(editedAuthorId, response);
      } else if (
        request.method === 'DELETE' &&
        request.url.startsWith('/authors/')
      ) {
        const deletedAuthorId = await AuthorModel.deleteOneAuthor(request, response);
        AuthorView.sendDeletedAuthorId(deletedAuthorId, response);
      } else {
        logEventToLogFile('' , 'Something unexpected happened in the BookController.')
      }
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException(error.message);
    }
  }
}

export default AuthorController;

BookController.js

import BookModel from '../models/BookModel.js';
import BookView from '../views/BookView.js';
import {logEventToLogFile} from '../utilities.js';
import DatabaseException from '../exceptions/DatabaseException.js';

class BookController {
  static async routeRequest(request, response, requestData) {
    try {
      if (request.method === 'GET' && request.url === '/books') {
        const allBooks = await BookModel.getAllBooks();
        if (allBooks) {
          BookView.sendAllBooks(allBooks, response);
        } else {
          response.writeHead(500);
          response.end(JSON.stringify({message: 'Server error.'}));
        }
      } else if (
        request.method === 'GET' &&
        request.url.startsWith('/books/')
      ) {
        const oneBook = await BookModel.getOneBook(request);
        BookView.sendOneBook(oneBook, response);
      } else if (request.method === 'POST' && request.url === '/books') {
        const createdBookId = await BookModel.addOneBook(requestData);
        BookView.sendCreatedBookId(createdBookId, response);
      } else if (
        request.method === 'PUT' &&
        request.url.startsWith('/books/')
      ) {
        const editedBookId = await BookModel.updateOneBook(request, requestData);
        BookView.sendEditedBookId(editedBookId, response);
      } else if (
        request.method === 'DELETE' &&
        request.url.startsWith('/books/')
      ) {
        const deletedBookId = await BookModel.deleteOneBook(request);
        BookView.sendDeletedBookId(deletedBookId, response);
      } else {
        logEventToLogFile('' , 'Something unexpected happened in the BookController.')
      }
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException(error.message);
    }
  }
}

export default BookController;

AuthorModel.js

import createConnection from '../databaseConnection.js';
import {logEventToLogFile} from "../utilities.js";
import DatabaseException from "../exceptions/DatabaseException.js";

class AuthorModel {
  static async getAllAuthors() {
    let connection;
    try {
      connection = await createConnection();
      const [result] = await connection.execute('SELECT * FROM authors');
      return result;
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }

  static async getOneAuthor(request) {
    const id = request.url.split('/').pop();
    let connection;
    try {
      connection = await createConnection();
      const [result] = await connection.execute('SELECT * FROM authors WHERE id = ?', [id]);
      return result[0];
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }

  static async addOneAuthor(requestData) {
    let connection;
    const newAuthor = requestData;

    try {
      connection = await createConnection();
      const query = `INSERT INTO authors (name) VALUES (?)`;
      const params = [newAuthor.name];
      const [result] = await connection.execute(query, params);
      return result.insertId;
    } catch (error) {
      if (error.code === 'ER_DUP_ENTRY') {
        throw new DatabaseException('Author already exists');
      }
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }


  static async updateOneAuthor(request, requestData) {
    const id = request.url.split('/').pop();
    let result;
    let connection;
    const updatedAuthor = requestData;

    try {
      connection = await createConnection();
      const query = `UPDATE authors SET name = ? WHERE id = ?`;
      const params = [updatedAuthor.name, id];
      [result] = await connection.execute(query, params);
    } catch (error) {
      logEventToLogFile(new DatabaseException(), `Failed to update author with id ${id}.`);
      throw new DatabaseException(`Failed to update author with id ${id}.`);
    } finally {
      if (connection) connection.end();
    }

    if (result.affectedRows === 0) {
      logEventToLogFile(new DatabaseException(), `Author with id ${id} does not exist.`);
      throw new DatabaseException(`Failed to update author. Author with id ${id} does not exist.`);
    }
    return id;
  }

  static async deleteOneAuthor(request) {
    const id = request.url.split('/').pop();
    let result;
    let connection;

    try {
      connection = await createConnection();
      [result] = await connection.execute('DELETE FROM authors WHERE id = ?', [id]);
    } catch {
      logEventToLogFile(new DatabaseException(), `Failed to delete author with id ${id}.`);
      throw new DatabaseException(`Failed to delete author with id ${id}.`);
    } finally {
      if (connection) connection.end();
    }

    if (result.affectedRows === 0) {
      logEventToLogFile(new DatabaseException(), `Author with id ${id} does not exist.`);
      throw new DatabaseException(`Failed to delete author. Author with id ${id} does not exist.`);
    }
    return id;
  }

  static async getAllBooksFromOneAuthor(request) {
    const id = request.url.split('/')[2];
    let connection;
    try {
      connection = await createConnection();
      const [result] = await connection.execute(
        'SELECT id, title, published_year FROM books WHERE author_id = ?',
        [id]
      );
      return result;
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }
}
export default AuthorModel;

BookModel.js

import createConnection from '../databaseConnection.js';
import DatabaseException from '../exceptions/DatabaseException.js';
import {logEventToLogFile} from '../utilities.js';

class BookModel {
  static async getAllBooks() {
    let connection;
    try {
      connection = await createConnection();
      const [result] = await connection.execute('SELECT * FROM books');
      return result;
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }

  static async getOneBook(request) {
    const id = request.url.split('/').pop();
    let connection;
    try {
      connection = await createConnection();
      const [result] = await connection.execute(
        'SELECT * FROM books WHERE id = ?',
        [id]
      );
      return result[0];
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }

  static async addOneBook(requestData) {
    let connection;
    const newBook = requestData;

    try {
      connection = await createConnection();
      const query = `
          INSERT INTO books (title, author_id, published_year)
          VALUES (?, ?, ?)`;
      const params = [newBook.title, newBook.authorId, newBook.publishedYear];
      const [result] = await connection.execute(query, params);
      return result.insertId;
    } catch (error) {
      logEventToLogFile(error, error.message);
      throw new DatabaseException('API is under maintenance.');
    } finally {
      if (connection) {
        await connection.end();
      }
    }
  }

  static async updateOneBook(request, requestData) {
    const id = request.url.split('/').pop();
    let result;
    let connection;
    const updatedBook = requestData;

    try {
      connection = await createConnection();
      const query = `
          UPDATE books
          SET title          = ?,
              author_id      = ?,
              published_year = ?
          WHERE id = ?
      `;
      const params = [
        updatedBook.title,
        updatedBook.authorId,
        updatedBook.publishedYear,
        id,
      ];

      [result] = await connection.execute(query, params);
    } catch (error) {
      logEventToLogFile(
        new DatabaseException(),
        `Failed to update book with id ${id}.`
      );
      throw new DatabaseException(`Failed to update book with id ${id}.`);
    } finally {
      if (connection) connection.end();
    }

    if (result.affectedRows === 0) {
      logEventToLogFile(
        new DatabaseException(),
        `Book with id ${id} does not exist.`
      );
      throw new DatabaseException(
        `Failed to update book. Book with id ${id} does not exist.`
      );
    }
    return id;
  }

  static async deleteOneBook(request) {
    const id = request.url.split('/').pop();
    let result;
    let connection;

    try {
      connection = await createConnection();
      [result] = await connection.execute('DELETE FROM books WHERE id = ?', [
        id,
      ]);
    } catch {
      logEventToLogFile(
        new DatabaseException(),
        `Failed to delete book with id ${id}.`
      );
      throw new DatabaseException(`Failed to delete book with id ${id}.`);
    } finally {
      if (connection) connection.end();
    }

    if (result.affectedRows === 0) {
      logEventToLogFile(
        new DatabaseException(),
        `Book with id ${id} does not exist.`
      );
      throw new DatabaseException(
        `Failed to delete book. Book with id ${id} does not exist.`
      );
    }
    return id;
  }
}

export default BookModel;

AuthorView.js

class AuthorView {

  static sendAllBooksFromOneAuthor(allBooksFromOneAuthor, response) {
    const allBooksFromOneAuthorJSON = JSON.stringify(allBooksFromOneAuthor);
    response.writeHead(200);
    response.end(allBooksFromOneAuthorJSON);
  }
  static sendAllAuthors(allAuthors, response) {
    const allAuthorsJSON = JSON.stringify(allAuthors);
    response.writeHead(200);
    response.end(allAuthorsJSON);
  }

  static sendOneAuthor(oneAuthor, response) {
    if (oneAuthor) {
      const oneAuthorJSON = JSON.stringify(oneAuthor);
      response.writeHead(200);
      response.end(oneAuthorJSON);
    } else {
      response.writeHead(404);
      response.end('No such author.');
    }
  }

  static sendCreatedAuthorId(id, response) {
    response.writeHead(201);
    response.end(
      JSON.stringify({
        message: 'Author added successfully.',
        authorId: id,
      })
    );
  }

  static sendEditedAuthorId(id, response) {
    response.writeHead(200);
    response.end(
      JSON.stringify({
        message: 'Author updated successfully.',
        authorId: id,
      })
    );
  }

  static sendDeletedAuthorId(id, response) {
    response.writeHead(200);
    response.end(
      JSON.stringify({
        message: 'Author deleted successfully.',
        authorId: id,
      })
    );
  }
}

export default AuthorView;

BookView.js

class BookView {
  static sendAllBooks(allBooks, response) {
    const allBooksJSON = JSON.stringify(allBooks);
    response.writeHead(200);
    response.end(allBooksJSON);
  }

  static sendOneBook(oneBook, response) {
    if (oneBook) {
      const oneBookJSON = JSON.stringify(oneBook);
      response.writeHead(200);
      response.end(oneBookJSON);
    } else {
      response.writeHead(404);
      response.end('No such book.');
    }
  }

  static sendCreatedBookId(id, response) {
    response.writeHead(201);
    response.end(
      JSON.stringify({
        message: 'Book added successfully.',
        bookId: id,
      })
    );
  }

  static sendEditedBookId(id, response) {
    response.writeHead(200);
    response.end(
      JSON.stringify({
        message: 'Book updated successfully.',
        bookId: id,
      })
    );
  }

  static sendDeletedBookId(id, response) {
    response.writeHead(200);
    response.end(
      JSON.stringify({
        message: 'Book deleted successfully.',
        bookId: id,
      })
    );
  }

  static sendNotAuthorizedMessage(response) {
    response.writeHead(401);
    response.end(
      JSON.stringify({
        message: 'You are not authorized for this action.',
      })
    );
  }
}

export default BookView;

loginService.js

import {logEventToLogFile} from './utilities.js';
import DatabaseException from './exceptions/DatabaseException.js';
import createConnection from './databaseConnection.js';

const login = async userData => {
  let connection;
  try {
    let isAuthenticated = false;
    if (userData.username && userData.password) {
      connection = await createConnection();
      const query =
        'SELECT COUNT(*) AS count FROM users WHERE BINARY username = ? AND BINARY password = ?';
      const userParameters = [userData.username, userData.password];

      const [result] = await connection.execute(query, userParameters);
      isAuthenticated = result[0].count > 0;
      return isAuthenticated;
    } else {
      return isAuthenticated;
    }
  } catch (error) {
    logEventToLogFile(error, error.message);
    throw new DatabaseException('API is under maintenance.');
  } finally {
    if (connection) connection.end();
  }
};

export default login;


Table structure:

CREATE TABLE books (
  id INT(11) NOT NULL AUTO_INCREMENT,
  title VARCHAR(255) NOT NULL,
  author_id INT(11) NOT NULL,
  published_year INT(4) NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE authors (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) UNIQUE NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE users (
  id INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);

Create an open api documentation in yaml based on these.